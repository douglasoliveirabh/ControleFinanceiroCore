// <auto-generated />
using ControleFinanceiro.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ControleFinanceiro.Data.Migrations
{
    [DbContext(typeof(ControleFinanceiroContext))]
    partial class ControleFinanceiroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.Group", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.GroupPermission", b =>
                {
                    b.Property<long>("GroupId");

                    b.Property<long>("PermissionId");

                    b.HasKey("GroupId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupPermission");
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConstantName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.UserGroup", b =>
                {
                    b.Property<long>("GroupId");

                    b.Property<long>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.GroupPermission", b =>
                {
                    b.HasOne("ControleFinanceiro.Domain.Models.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControleFinanceiro.Domain.Models.Permission", "Permission")
                        .WithMany("Groups")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.Person", b =>
                {
                    b.OwnsOne("ControleFinanceiro.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("PersonId");

                            b1.Property<string>("City")
                                .HasColumnName("City")
                                .HasColumnType("varchar(50)")
                                .HasMaxLength(50);

                            b1.Property<string>("Complement")
                                .HasColumnName("Complement")
                                .HasColumnType("varchar(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("Country")
                                .HasColumnName("Country")
                                .HasColumnType("varchar(50)")
                                .HasMaxLength(50);

                            b1.Property<string>("NeighborHood")
                                .HasColumnName("NeighborHood")
                                .HasColumnType("varchar(50)")
                                .HasMaxLength(50);

                            b1.Property<int>("Number")
                                .HasColumnName("Number");

                            b1.Property<string>("PostalCode")
                                .HasColumnName("PostalCode")
                                .HasColumnType("varchar(10)")
                                .HasMaxLength(10);

                            b1.Property<string>("State")
                                .HasColumnName("State")
                                .HasColumnType("varchar(50)")
                                .HasMaxLength(50);

                            b1.Property<string>("Street")
                                .HasColumnName("Street")
                                .HasColumnType("varchar(100)")
                                .HasMaxLength(100);

                            b1.ToTable("Persons");

                            b1.HasOne("ControleFinanceiro.Domain.Models.Person")
                                .WithOne("Address")
                                .HasForeignKey("ControleFinanceiro.Domain.ValueObjects.Address", "PersonId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ControleFinanceiro.Domain.Models.UserGroup", b =>
                {
                    b.HasOne("ControleFinanceiro.Domain.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControleFinanceiro.Domain.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
